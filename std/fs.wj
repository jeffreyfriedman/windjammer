// std/fs - File system operations
// Thin wrapper over std::fs for clean Windjammer APIs

// Read entire file to string
fn read_to_string(path: &str) -> Result<String, std.io.Error> {
    std.fs.read_to_string(path)
}

// Read entire file to bytes
fn read(path: &str) -> Result<Vec<u8>, std.io.Error> {
    std.fs.read(path)
}

// Write string to file (creates or overwrites)
fn write(path: &str, contents: &str) -> Result<(), std.io.Error> {
    std.fs.write(path, contents)
}

// Write bytes to file
fn write_bytes(path: &str, contents: &[u8]) -> Result<(), std.io.Error> {
    std.fs.write(path, contents)
}

// Append string to file
fn append(path: &str, contents: &str) -> Result<(), std.io.Error> {
    use std.fs.OpenOptions
    use std.io.Write
    
    let mut file = OpenOptions.new()
        .append(true)
        .create(true)
        .open(path)?
    
    file.write_all(contents.as_bytes())?
    Ok(())
}

// Check if path exists
fn exists(path: &str) -> bool {
    std.path.Path.new(path).exists()
}

// Check if path is a file
fn is_file(path: &str) -> bool {
    std.path.Path.new(path).is_file()
}

// Check if path is a directory
fn is_dir(path: &str) -> bool {
    std.path.Path.new(path).is_dir()
}

// Create directory (including parents)
fn create_dir_all(path: &str) -> Result<(), std.io.Error> {
    std.fs.create_dir_all(path)
}

// Remove file
fn remove_file(path: &str) -> Result<(), std.io.Error> {
    std.fs.remove_file(path)
}

// Remove directory (must be empty)
fn remove_dir(path: &str) -> Result<(), std.io.Error> {
    std.fs.remove_dir(path)
}

// Remove directory and all contents recursively
fn remove_dir_all(path: &str) -> Result<(), std.io.Error> {
    std.fs.remove_dir_all(path)
}

// Copy file
fn copy(from: &str, to: &str) -> Result<u64, std.io.Error> {
    std.fs.copy(from, to)
}

// Rename/move file or directory
fn rename(from: &str, to: &str) -> Result<(), std.io.Error> {
    std.fs.rename(from, to)
}

// List directory contents
fn read_dir(path: &str) -> Result<Vec<String>, std.io.Error> {
    let entries = std.fs.read_dir(path)?
    let mut names = Vec.new()
    
    for entry in entries {
        let entry = entry?
        if let Some(name) = entry.file_name().to_str() {
            names.push(name.to_string())
        }
    }
    
    Ok(names)
}

// Get file metadata (size, modified time, etc.)
fn metadata(path: &str) -> Result<std.fs.Metadata, std.io.Error> {
    std.fs.metadata(path)
}

// Get file size in bytes
fn file_size(path: &str) -> Result<u64, std.io.Error> {
    let meta = std.fs.metadata(path)?
    Ok(meta.len())
}