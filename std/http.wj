// std/http - HTTP client
// Thin wrapper over reqwest for clean Windjammer APIs

use reqwest

// GET request - returns response body as string
fn get(url: &str) -> Result<String, reqwest.Error> {
    let response = reqwest.blocking.get(url)?
    response.text()
}

// POST request with JSON body
fn post_json(url: &str, body: &str) -> Result<String, reqwest.Error> {
    let client = reqwest.blocking.Client.new()
    let response = client.post(url)
        .header("Content-Type", "application/json")
        .body(body.to_string())
        .send()?
    response.text()
}

// POST request with form data
fn post_form(url: &str, params: &[(String, String)]) -> Result<String, reqwest.Error> {
    let client = reqwest.blocking.Client.new()
    let response = client.post(url)
        .form(params)
        .send()?
    response.text()
}

// PUT request
fn put(url: &str, body: &str) -> Result<String, reqwest.Error> {
    let client = reqwest.blocking.Client.new()
    let response = client.put(url)
        .body(body.to_string())
        .send()?
    response.text()
}

// DELETE request
fn delete(url: &str) -> Result<String, reqwest.Error> {
    let client = reqwest.blocking.Client.new()
    let response = client.delete(url).send()?
    response.text()
}

// GET request with headers
fn get_with_headers(url: &str, headers: &[(String, String)]) -> Result<String, reqwest.Error> {
    let client = reqwest.blocking.Client.new()
    let mut request = client.get(url)
    
    for (key, value) in headers {
        request = request.header(key, value)
    }
    
    let response = request.send()?
    response.text()
}

// Download file from URL
fn download(url: &str, path: &str) -> Result<(), reqwest.Error> {
    let response = reqwest.blocking.get(url)?
    let bytes = response.bytes()?
    std.fs.write(path, bytes)?
    Ok(())
}