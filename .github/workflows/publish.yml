name: Publish to crates.io

on:
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags (e.g., v0.17.0)
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.version_check.outputs.should_publish }}
      version: ${{ steps.version_check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: get_version
        run: |
          # Extract version from tag (e.g., v0.17.0 -> 0.17.0)
          VERSION="${GITHUB_REF#refs/tags/v}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Tagged version: $VERSION"
          
          # Verify it matches Cargo.toml
          CARGO_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          if [ "$VERSION" != "$CARGO_VERSION" ]; then
            echo "ERROR: Tag version ($VERSION) doesn't match Cargo.toml version ($CARGO_VERSION)"
            exit 1
          fi
          echo "‚úì Tag matches Cargo.toml version"

      - name: Check if version is published
        id: version_check
        run: |
          VERSION="${{ steps.get_version.outputs.version }}"
          
          # Check if this version already exists on crates.io
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://crates.io/api/v1/crates/windjammer/$VERSION")
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Version $VERSION already published to crates.io"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          else
            echo "Version $VERSION not yet published to crates.io"
            echo "should_publish=true" >> $GITHUB_OUTPUT
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  publish:
    needs: check-version
    if: needs.check-version.outputs.should_publish == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v3
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings

      - name: Verify CHANGELOG entry
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          
          # Check if version exists in CHANGELOG.md
          if ! grep -q "## \[$VERSION\]" CHANGELOG.md; then
            echo "ERROR: No CHANGELOG.md entry for version $VERSION"
            exit 1
          fi
          
          # Check if it has a release date (not "In Progress")
          if grep "## \[$VERSION\] - In Progress" CHANGELOG.md; then
            echo "ERROR: CHANGELOG.md entry for $VERSION is still marked 'In Progress'"
            echo "Please update it with the release date: ## [$VERSION] - $(date +%Y-%m-%d)"
            exit 1
          fi
          
          echo "‚úì CHANGELOG.md has proper entry for $VERSION"

      - name: Dry run publish
        run: cargo publish --dry-run

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: cargo publish

      - name: Notify success
        if: success()
        run: |
          echo "‚úÖ Successfully published windjammer v${{ needs.check-version.outputs.version }} to crates.io!"
          echo "üì¶ Install with: cargo install windjammer"

      - name: Notify failure
        if: failure()
        run: |
          echo "‚ùå Failed to publish windjammer v${{ needs.check-version.outputs.version }}"
          echo "Check the logs above for details"

