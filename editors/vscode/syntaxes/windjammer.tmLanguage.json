{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Windjammer",
  "scopeName": "source.windjammer",
  "patterns": [
    { "include": "#comments" },
    { "include": "#decorators" },
    { "include": "#keywords" },
    { "include": "#types" },
    { "include": "#strings" },
    { "include": "#characters" },
    { "include": "#numbers" },
    { "include": "#functions" },
    { "include": "#macros" },
    { "include": "#operators" },
    { "include": "#punctuation" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.windjammer",
          "match": "//.*$"
        },
        {
          "name": "comment.block.windjammer",
          "begin": "/\\*",
          "end": "\\*/"
        }
      ]
    },
    "decorators": {
      "patterns": [
        {
          "name": "meta.decorator.windjammer",
          "match": "@(export|test|async|derive|arg|serde|validate|auto|wasm_bindgen)\\b",
          "captures": {
            "1": { "name": "entity.name.function.decorator.windjammer" }
          }
        },
        {
          "name": "meta.decorator.windjammer",
          "match": "@([a-zA-Z_][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": { "name": "entity.name.function.decorator.windjammer" }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.windjammer",
          "match": "\\b(if|else|match|for|while|loop|break|continue|return|go|defer|await|async)\\b"
        },
        {
          "name": "keyword.other.windjammer",
          "match": "\\b(let|mut|const|static|fn|struct|enum|trait|impl|type|pub|use|as|where|unsafe|dyn|bound|Self|self)\\b"
        },
        {
          "name": "storage.modifier.windjammer",
          "match": "\\b(pub|mut|const|static)\\b"
        },
        {
          "name": "keyword.operator.logical.windjammer",
          "match": "\\b(and|or|not)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "storage.type.primitive.windjammer",
          "match": "\\b(int|int32|uint|float|bool|string)\\b"
        },
        {
          "name": "storage.type.windjammer",
          "match": "\\b([A-Z][a-zA-Z0-9_]*)\\b"
        },
        {
          "name": "storage.type.generic.windjammer",
          "match": "\\b(Option|Result|Vec|HashMap|HashSet)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.windjammer",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.windjammer",
              "match": "\\\\(n|r|t|\\\\|0|\"|')"
            },
            {
              "name": "meta.interpolation.windjammer",
              "begin": "\\$\\{",
              "end": "\\}",
              "patterns": [
                { "include": "$self" }
              ]
            }
          ]
        }
      ]
    },
    "characters": {
      "patterns": [
        {
          "name": "string.quoted.single.windjammer",
          "match": "'([^'\\\\]|\\\\(n|r|t|\\\\|0|\"|'))'"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.windjammer",
          "match": "\\b[0-9][0-9_]*\\.[0-9][0-9_]*([eE][+-]?[0-9_]+)?\\b"
        },
        {
          "name": "constant.numeric.integer.windjammer",
          "match": "\\b[0-9][0-9_]*\\b"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.windjammer",
          "match": "\\b([a-z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "macros": {
      "patterns": [
        {
          "name": "entity.name.function.macro.windjammer",
          "match": "\\b(println|print|format|panic|assert|vec)!"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic.windjammer",
          "match": "(\\+|-|\\*|/|%)"
        },
        {
          "name": "keyword.operator.comparison.windjammer",
          "match": "(==|!=|<|<=|>|>=)"
        },
        {
          "name": "keyword.operator.logical.windjammer",
          "match": "(&&|\\|\\||!)"
        },
        {
          "name": "keyword.operator.assignment.windjammer",
          "match": "(=|\\+=|-=|\\*=|/=|%=)"
        },
        {
          "name": "keyword.operator.arrow.windjammer",
          "match": "(->|=>|<-|\\|>)"
        },
        {
          "name": "keyword.operator.reference.windjammer",
          "match": "(&mut|&)"
        },
        {
          "name": "keyword.operator.range.windjammer",
          "match": "(\\.\\.|\\.\\.=)"
        },
        {
          "name": "keyword.operator.ternary.windjammer",
          "match": "(\\?|:)"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.separator.windjammer",
          "match": "[,;]"
        },
        {
          "name": "punctuation.brackets.windjammer",
          "match": "[\\{\\}\\[\\]\\(\\)]"
        },
        {
          "name": "punctuation.accessor.windjammer",
          "match": "\\."
        },
        {
          "name": "punctuation.scope.windjammer",
          "match": "::"
        }
      ]
    }
  }
}
