// Example 24: Trait Bounds
// Demonstrates inline trait bounds on generic type parameters

// Basic trait bound: single trait
fn print_value<T: Display>(value: T) {
    println!("Value: {}", value)
}

// Multiple trait bounds with +
fn display_and_clone<T: Display + Clone>(value: T) {
    let copy = value.clone()
    println!("Original: {}", value)
    println!("Clone: {}", copy)
}

// Trait bounds on struct
struct Container<T: Clone> {
    value: T,
}

impl<T: Clone> Container<T> {
    fn get_value(&self) -> T {
        self.value.clone()
    }
}

// Multiple trait bounds on multiple type parameters
fn compare_two<T: Display, U: Display>(first: T, second: U) {
    println!("First: {}", first)
    println!("Second: {}", second)
}

fn main() {
    println!("=== Trait Bounds Example ===")
    
    // Test single trait bound
    println!("\n1. Single trait bound (Display):")
    print_value(42)
    print_value("Hello")
    
    // Test multiple trait bounds
    println!("\n2. Multiple trait bounds (Display + Clone):")
    display_and_clone(100)
    display_and_clone("test")
    
    // Test struct with trait bounds
    println!("\n3. Struct with trait bound:")
    let container = Container { value: 42 }
    let val = container.get_value()
    println!("Container value: {}", val)
    
    // Test multiple type parameters with bounds
    println!("\n4. Multiple type parameters with bounds:")
    compare_two(42, "world")
    
    println!("\n=== Done ===")
}

