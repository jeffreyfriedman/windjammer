// Simple game example using windjammer-runtime::game
// This demonstrates the ECS (Entity-Component-System) architecture

use std::game

fn main() {
    // Create a game world
    let mut world = game::World::new()
    
    // Create player entity with transform and velocity
    let player = game::create_entity(&mut world)
    game::add_transform(&mut world, player, game::Vec3::new(0.0, 0.0, 0.0))
    game::add_velocity(&mut world, player, game::Vec3::new(1.0, 0.0, 0.0))
    
    // Create enemy entity
    let enemy = game::create_entity(&mut world)
    game::add_transform(&mut world, enemy, game::Vec3::new(10.0, 0.0, 0.0))
    
    // Query all entities with transforms
    let transforms = world.query::<game::Transform>()
    println!("Found {} entities with transforms", transforms.len())
    
    // Print player position
    if let Some(transform) = world.get_component::<game::Transform>(player) {
        println!("Player position: ({}, {}, {})", 
            transform.position.x,
            transform.position.y,
            transform.position.z)
    }
    
    println!("Game world initialized successfully!")
}

