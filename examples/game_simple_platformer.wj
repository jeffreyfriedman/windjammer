// Simple platformer game - demonstrates ECS architecture
use std::game

fn main() {
    println!("=== Windjammer Game Engine Demo ===")
    println!("Creating a simple platformer...")
    
    // Create game world
    let mut world = game::World::new()
    
    // Create player entity
    let player = world.create_entity()
    world.add_component(player, game::Transform::new(game::Vec3::new(0.0, 0.0, 0.0)))
    world.add_component(player, game::Velocity::new(game::Vec3::new(0.0, 0.0, 0.0)))
    println!("✓ Created player entity")
    
    // Create platform entities
    let platform1 = world.create_entity()
    world.add_component(platform1, game::Transform::new(game::Vec3::new(0.0, -2.0, 0.0)))
    world.add_component(platform1, game::Mesh::cube(4.0))
    
    let platform2 = world.create_entity()
    world.add_component(platform2, game::Transform::new(game::Vec3::new(5.0, -1.0, 0.0)))
    world.add_component(platform2, game::Mesh::cube(3.0))
    
    println!("✓ Created {} platforms", 2)
    
    // Create enemy entities
    let enemy1 = world.create_entity()
    world.add_component(enemy1, game::Transform::new(game::Vec3::new(3.0, 0.0, 0.0)))
    world.add_component(enemy1, game::Velocity::new(game::Vec3::new(-1.0, 0.0, 0.0)))
    
    let enemy2 = world.create_entity()
    world.add_component(enemy2, game::Transform::new(game::Vec3::new(-3.0, 0.0, 0.0)))
    world.add_component(enemy2, game::Velocity::new(game::Vec3::new(1.0, 0.0, 0.0)))
    
    println!("✓ Created {} enemies", 2)
    
    // Query all entities with transforms
    let transforms = world.query::<game::Transform>()
    
    println!("\n=== World State ===")
    println!("Total entities with transforms: {}", transforms.len())
    
    // Get player position
    match world.get_component::<game::Transform>(player) {
        Some(transform) => {
            println!("Player position: ({}, {}, {})", 
                transform.position.x, 
                transform.position.y, 
                transform.position.z)
        },
        _ => {},
    }
    
    // Demonstrate querying
    println!("\n=== Querying Entities ===")
    let velocities = world.query::<game::Velocity>()
    println!("Found {} entities with velocity", velocities.len())
    
    for (entity_id, velocity) in velocities {
        println!("Entity {:?} has velocity: ({}, {}, {})", 
            entity_id, 
            velocity.linear.x, 
            velocity.linear.y, 
            velocity.linear.z)
    }
    
    println!("\n✓ Game simulation complete!")
}

