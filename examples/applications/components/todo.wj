// TODO app component demonstrating lists and more complex state

struct TodoApp {
    todos: Vec<String>,
    input: String,
    filter: String,
}

impl TodoApp {
    fn new() -> TodoApp {
        TodoApp {
            todos: vec![],
            input: String::new(),
            filter: "all".to_string(),
        }
    }
    
    fn add_todo(&mut self) {
        if self.input != "" {
            self.todos.push(self.input.clone())
            self.input = String::new()
        }
    }
    
    fn remove_todo(&mut self, index: int) {
        if index < self.todos.len() as int {
            self.todos.remove(index as usize)
        }
    }
    
    fn clear_completed(&mut self) {
        self.todos = vec![]
    }
    
    fn set_filter(&mut self, new_filter: String) {
        self.filter = new_filter
    }
    
    fn active_count(&self) -> int {
        self.todos.len() as int
    }
    
    fn render(&self) -> String {
        let mut html = String::new()
        html.push_str("<div class=\"todo-app\">")
        html.push_str("<h1>Windjammer TODO</h1>")
        html.push_str("<div class=\"todo-input\">")
        html.push_str("<input type=\"text\" placeholder=\"What needs to be done?\">")
        html.push_str("<button>Add</button>")
        html.push_str("</div>")
        html.push_str("<div class=\"todo-list\">")
        
        for todo in &self.todos {
            html.push_str("<div class=\"todo-item\">")
            html.push_str("<span>")
            html.push_str(todo)
            html.push_str("</span>")
            html.push_str("<button class=\"delete-btn\">Ã—</button>")
            html.push_str("</div>")
        }
        
        html.push_str("</div>")
        html.push_str("<div class=\"todo-footer\">")
        html.push_str(&format!("<span class=\"todo-count\">{} items left</span>", self.active_count()))
        html.push_str("</div>")
        html.push_str("</div>")
        
        html
    }
}

fn main() {
    let mut app = TodoApp::new()
    println!("{}", app.render())
}
