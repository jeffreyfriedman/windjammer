// Example 5: Modern Features - Pipe operator, closures, ranges

// Simple transformation functions
fn double(x: int) -> int {
    x * 2
}

fn add_ten(x: int) -> int {
    x + 10
}

// Labeled arguments
fn create_user(name: string, age: int) -> string {
    "User: ${name}, Age: ${age}"
}

fn main() {
    // Pipe operator
    println!("=== Pipe Operator ===")
    let x = 5
    let result = x |> double |> add_ten
    println!("${x} |> double |> add_ten = ${result}")
    
    // Labeled arguments
    println!("\n=== Labeled Arguments ===")
    let user = create_user(name: "Alice", age: 30)
    println!("${user}")
    
    // Ranges
    println!("\n=== Ranges ===")
    println!("Numbers 0..5:")
    for i in 0..5 {
        println!("  ${i}")
    }
    
    println!("\nNumbers 0..=3:")
    for i in 0..=3 {
        println!("  ${i}")
    }
    
    // Character literals
    println!("\n=== Character Literals ===")
    let ch_a = 'a'
    let ch_newline = '\n'
    let ch_tab = '\t'
    println!("Character: ${ch_a}")
    
    // Ternary operator
    println!("\n=== Ternary Operator ===")
    for i in -2..3 {
        let sign = i >= 0 ? "positive" : "negative"
        println!("${i} is ${sign}")
    }
    
    // String interpolation
    println!("\n=== String Interpolation ===")
    let name = "World"
    let count = 42
    println!("Hello, ${name}! Count: ${count}")
}
