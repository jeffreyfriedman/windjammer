// Basic Windjammer feature test (no stdlib dependencies)
// Tests: functions, structs, impl blocks, enums, match, loops

struct Point {
    x: i64,
    y: i64,
}

impl Point {
    fn new(x: i64, y: i64) -> Point {
        Point { x, y }
    }
    
    fn sum(&self) -> i64 {
        self.x + self.y
    }
}

enum Shape {
    Circle(f64),
    Square(f64),
}

fn area(shape: &Shape) -> f64 {
    match shape {
        Shape.Circle(radius) => 3.14159 * radius * radius,
        Shape.Square(side) => side * side,
    }
}

fn fibonacci(n: i64) -> i64 {
    if n <= 1 {
        n
    } else {
        fibonacci(n - 1) + fibonacci(n - 2)
    }
}

fn factorial(n: i64) -> i64 {
    if n <= 1 {
        1
    } else {
        n * factorial(n - 1)
    }
}

fn sum_range(n: i64) -> i64 {
    let mut sum = 0
    for i in 0..n {
        sum += i
    }
    sum
}

fn main() {
    println!("=== Windjammer Basic Tests ===\n")
    
    println!("1. Struct and Methods:")
    let p = Point.new(3, 4)
    println!("Point({}, {})", p.x, p.y)
    let sum = p.sum()
    println!("Sum: {}", sum)
    println!("")
    
    println!("2. Enums and Pattern Matching:")
    let circle = Shape.Circle(5.0)
    let square = Shape.Square(4.0)
    println!("Circle area: {}", area(&circle))
    println!("Square area: {}", area(&square))
    println!("")
    
    println!("3. Recursion:")
    println!("fibonacci(10) = {}", fibonacci(10))
    println!("factorial(5) = {}", factorial(5))
    println!("")
    
    println!("4. Loops:")
    println!("sum(0..10) = {}", sum_range(10))
    println!("")
    
    println!("âœ… All tests passed!")
}