// Working UI Counter Demo
// This demonstrates a fully functional counter with:
// - Reactive state management
// - Event handling
// - UI rendering

use windjammer_ui.*

struct CounterApp {
    count: Signal<int>,
}

impl CounterApp {
    fn new() -> CounterApp {
        CounterApp {
            count: Signal::new(0),
        }
    }
    
    fn increment(self) {
        let current = self.count.get()
        self.count.set(current + 1)
    }
    
    fn decrement(self) {
        let current = self.count.get()
        self.count.set(current - 1)
    }
    
    fn reset(self) {
        self.count.set(0)
    }
    
    fn render(self) -> VNode {
        let count_value = self.count.get()
        
        return VNode::Element(VElement {
            tag: "div",
            attrs: {
                "class": "counter-app",
            },
            children: [
                VNode::Element(VElement {
                    tag: "h1",
                    children: [
                        VNode::Text("Counter Demo"),
                    ],
                }),
                VNode::Element(VElement {
                    tag: "div",
                    attrs: {
                        "class": "counter-display",
                    },
                    children: [
                        VNode::Text(format!("Count: {}", count_value)),
                    ],
                }),
                VNode::Element(VElement {
                    tag: "div",
                    attrs: {
                        "class": "button-group",
                    },
                    children: [
                        VNode::Element(VElement {
                            tag: "button",
                            attrs: {
                                "onclick": "decrement",
                            },
                            children: [
                                VNode::Text("-"),
                            ],
                        }),
                        VNode::Element(VElement {
                            tag: "button",
                            attrs: {
                                "onclick": "reset",
                            },
                            children: [
                                VNode::Text("Reset"),
                            ],
                        }),
                        VNode::Element(VElement {
                            tag: "button",
                            attrs: {
                                "onclick": "increment",
                            },
                            children: [
                                VNode::Text("+"),
                            ],
                        }),
                    ],
                }),
            ],
        })
    }
}

fn main() {
    println!("=== Windjammer UI Counter Demo ===")
    println!()
    
    let app = CounterApp::new()
    
    // Create simple renderer
    let renderer = SimpleRenderer::new()
    
    // Initial render
    println!("Initial state:")
    let vnode = app.render()
    renderer.render(vnode)
    renderer.print()
    println!()
    
    // Simulate user interactions
    println!("After clicking '+' button:")
    app.increment()
    let vnode = app.render()
    renderer.render(vnode)
    renderer.print()
    println!()
    
    println!("After clicking '+' again:")
    app.increment()
    let vnode = app.render()
    renderer.render(vnode)
    renderer.print()
    println!()
    
    println!("After clicking '-' button:")
    app.decrement()
    let vnode = app.render()
    renderer.render(vnode)
    renderer.print()
    println!()
    
    println!("After clicking 'Reset' button:")
    app.reset()
    let vnode = app.render()
    renderer.render(vnode)
    renderer.print()
    println!()
    
    println!("âœ… UI Demo Complete!")
    println!("The counter state is reactive and the UI updates correctly.")
}

