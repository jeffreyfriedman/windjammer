// Interactive counter example - demonstrates reactivity and event handling
use std::ui

fn main() {
    // Create reactive state
    let count = ui::signal(0)
    
    // Create UI with event handlers
    let app = ui::div()
        .attr("class", "counter-app")
        .attr("style", "padding: 20px; font-family: sans-serif;")
        .child(
            ui::h1("Interactive Counter")
        )
        .child(
            ui::div()
                .attr("style", "font-size: 48px; margin: 20px 0;")
                .child(ui::text(&format!("Count: {}", count.get())))
        )
        .child(
            ui::div()
                .attr("style", "display: flex; gap: 10px;")
                .child(
                    ui::button("Increment")
                        .attr("style", "padding: 10px 20px; font-size: 16px;")
                        .on("click", {
                            let count = count.clone()
                            move || {
                                count.update(|c| *c += 1)
                            }
                        })
                )
                .child(
                    ui::button("Decrement")
                        .attr("style", "padding: 10px 20px; font-size: 16px;")
                        .on("click", {
                            let count = count.clone()
                            move || {
                                count.update(|c| *c -= 1)
                            }
                        })
                )
                .child(
                    ui::button("Reset")
                        .attr("style", "padding: 10px 20px; font-size: 16px;")
                        .on("click", {
                            let count = count.clone()
                            move || {
                                count.set(0)
                            }
                        })
                )
        )
        .into_vnode()
    
    // For now, just print the HTML
    // (WASM mounting will be added in a future version)
    println!("Generated HTML:")
    println!("{}", ui::render_to_string(&app))
}

